// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/ljinf/template_project_v2/internal/logic/appservice"
	"github.com/ljinf/template_project_v2/internal/logic/domainservice"
	"github.com/ljinf/template_project_v2/internal/logic/handler"
	"github.com/ljinf/template_project_v2/internal/repository"
	"github.com/ljinf/template_project_v2/internal/server"
	"github.com/ljinf/template_project_v2/pkg/app"
	"github.com/ljinf/template_project_v2/pkg/server/http"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper) (*app.App, func(), error) {
	db := repository.NewDB(viperViper)
	client := repository.NewRedis(viperViper)
	repositoryRepository := repository.NewRepository(db, client)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userDomainService := domainservice.NewUserDomainService(userRepository)
	userAppService := appservice.NewUserAppService(userDomainService)
	userHandler := handler.NewUserHandler(userAppService)
	httpServer := server.NewHTTPServer(viperViper, userHandler)
	appApp := newApp(httpServer)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRedis, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository)

var domainServiceSet = wire.NewSet(domainservice.NewUserDomainService)

var appServiceSet = wire.NewSet(appservice.NewUserAppService)

var handlerSet = wire.NewSet(handler.NewUserHandler)

var serverSet = wire.NewSet(server.NewHTTPServer)

// build App
func newApp(httpServer *http.Server) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName("api-server"))
}
